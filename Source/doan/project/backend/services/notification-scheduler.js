/**
 * Notification Scheduler Service
 * T·ª± ƒë·ªông g·ª≠i th√¥ng b√°o cho:
 * - S·ª± ki·ªán s·∫Øp di·ªÖn ra (24h tr∆∞·ªõc)
 * - S·ª± ki·ªán ƒë√£ k·∫øt th√∫c
 */

const database = require('../config/database');

class NotificationScheduler {
  constructor() {
    this.reminderInterval = null;
    this.completionInterval = null;
  }

  /**
   * Kh·ªüi ƒë·ªông scheduler
   */
  start() {
    console.log('üîî Starting Notification Scheduler...');
    
    // Ch·∫°y ngay l·∫ßn ƒë·∫ßu
    this.sendEventReminders();
    this.checkCompletedEvents();
    
    // Ch·∫°y m·ªói 1 gi·ªù ƒë·ªÉ ki·ªÉm tra event reminders (24h tr∆∞·ªõc)
    this.reminderInterval = setInterval(() => {
      this.sendEventReminders();
    }, 60 * 60 * 1000); // 1 hour
    
    // Ch·∫°y m·ªói 30 ph√∫t ƒë·ªÉ ki·ªÉm tra completed events
    this.completionInterval = setInterval(() => {
      this.checkCompletedEvents();
    }, 30 * 60 * 1000); // 30 minutes
    
    console.log('‚úÖ Notification Scheduler started');
  }

  /**
   * D·ª´ng scheduler
   */
  stop() {
    if (this.reminderInterval) {
      clearInterval(this.reminderInterval);
      this.reminderInterval = null;
    }
    if (this.completionInterval) {
      clearInterval(this.completionInterval);
      this.completionInterval = null;
    }
    console.log('üõë Notification Scheduler stopped');
  }

  /**
   * G·ª≠i th√¥ng b√°o nh·∫Øc nh·ªü s·ª± ki·ªán s·∫Øp di·ªÖn ra (24h tr∆∞·ªõc)
   */
  async sendEventReminders() {
    try {
      console.log('üìÖ Checking for upcoming events to send reminders...');
      
      // T√¨m c√°c s·ª± ki·ªán s·∫Ω di·ªÖn ra trong 24-25 gi·ªù t·ªõi (ƒë·ªÉ tr√°nh g·ª≠i nhi·ªÅu l·∫ßn)
      const query = `
        SELECT 
          e.event_id,
          e.title,
          e.start_date,
          e.start_time,
          e.location,
          r.user_id
        FROM Events e
        INNER JOIN EventRegistrations r ON e.event_id = r.event_id
        WHERE 
          e.status IN ('published', 'upcoming')
          AND r.status = 'registered'
          AND e.start_date IS NOT NULL
          -- S·ª± ki·ªán di·ªÖn ra trong 24-25 gi·ªù t·ªõi
          AND DATEDIFF(HOUR, GETDATE(), e.start_date) BETWEEN 23 AND 25
          -- Ch∆∞a g·ª≠i reminder cho user n√†y
          AND NOT EXISTS (
            SELECT 1 FROM Notifications n 
            WHERE n.user_id = r.user_id 
            AND n.related_event_id = e.event_id 
            AND n.type = 'event_reminder'
            AND DATEDIFF(DAY, n.created_at, GETDATE()) = 0
          )
      `;
      
      const result = await database.query(query);
      const rows = result.recordset || result || [];
      
      console.log(`Found ${rows.length} users to send event reminders`);
      
      for (const row of rows) {
        try {
          const eventDate = new Date(row.start_date);
          const dateStr = eventDate.toLocaleDateString('vi-VN');
          const timeStr = row.start_time || '';
          
          const title = `Nh·∫Øc nh·ªü: S·ª± ki·ªán s·∫Øp di·ªÖn ra`;
          const message = `S·ª± ki·ªán "${row.title}" s·∫Ω di·ªÖn ra v√†o ${dateStr} ${timeStr} t·∫°i ${row.location || 'ƒë·ªãa ƒëi·ªÉm s·∫Ω th√¥ng b√°o'}. ƒê·ª´ng qu√™n tham gia nh√©!`;
          
          const insertQuery = `
            INSERT INTO Notifications (user_id, title, message, type, related_event_id, is_read, created_at)
            VALUES (@userId, @title, @message, 'event_reminder', @eventId, 0, GETDATE())
          `;
          
          await database.query(insertQuery, {
            userId: row.user_id,
            title: title,
            message: message,
            eventId: row.event_id
          });
          
          console.log(`‚úÖ Sent reminder for event ${row.event_id} to user ${row.user_id}`);
        } catch (err) {
          console.error(`‚ùå Failed to send reminder for event ${row.event_id} to user ${row.user_id}:`, err.message);
        }
      }
      
      if (rows.length > 0) {
        console.log(`‚úÖ Sent ${rows.length} event reminders`);
      }
    } catch (err) {
      console.error('‚ùå Error in sendEventReminders:', err);
    }
  }

  /**
   * Ki·ªÉm tra v√† g·ª≠i th√¥ng b√°o cho s·ª± ki·ªán ƒë√£ k·∫øt th√∫c
   */
  async checkCompletedEvents() {
    try {
      console.log('üèÅ Checking for completed events...');
      
      // T√¨m c√°c s·ª± ki·ªán v·ª´a k·∫øt th√∫c (trong v√≤ng 1 gi·ªù qua)
      const query = `
        SELECT 
          e.event_id,
          e.title,
          e.end_date,
          r.user_id
        FROM Events e
        INNER JOIN EventRegistrations r ON e.event_id = r.event_id
        WHERE 
          e.status IN ('published', 'upcoming', 'ongoing')
          AND r.status = 'registered'
          AND e.end_date IS NOT NULL
          -- S·ª± ki·ªán ƒë√£ k·∫øt th√∫c trong 1 gi·ªù qua
          AND e.end_date < GETDATE()
          AND DATEDIFF(HOUR, e.end_date, GETDATE()) <= 1
          -- Ch∆∞a g·ª≠i th√¥ng b√°o completion
          AND NOT EXISTS (
            SELECT 1 FROM Notifications n 
            WHERE n.user_id = r.user_id 
            AND n.related_event_id = e.event_id 
            AND n.type = 'event_completed'
          )
      `;
      
      const result = await database.query(query);
      const rows = result.recordset || result || [];
      
      console.log(`Found ${rows.length} users to notify about completed events`);
      
      for (const row of rows) {
        try {
          const title = `S·ª± ki·ªán ƒë√£ k·∫øt th√∫c`;
          const message = `S·ª± ki·ªán "${row.title}" ƒë√£ k·∫øt th√∫c. C·∫£m ∆°n b·∫°n ƒë√£ tham gia! ƒê·ª´ng qu√™n ƒë√°nh gi√° v√† chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n.`;
          
          const insertQuery = `
            INSERT INTO Notifications (user_id, title, message, type, related_event_id, is_read, created_at)
            VALUES (@userId, @title, @message, 'event_completed', @eventId, 0, GETDATE())
          `;
          
          await database.query(insertQuery, {
            userId: row.user_id,
            title: title,
            message: message,
            eventId: row.event_id
          });
          
          console.log(`‚úÖ Sent completion notification for event ${row.event_id} to user ${row.user_id}`);
        } catch (err) {
          console.error(`‚ùå Failed to send completion notification for event ${row.event_id} to user ${row.user_id}:`, err.message);
        }
      }
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i s·ª± ki·ªán sang 'completed'
      if (rows.length > 0) {
        try {
          const updateQuery = `
            UPDATE Events 
            SET status = 'completed' 
            WHERE event_id IN (
              SELECT DISTINCT event_id FROM (
                SELECT e.event_id
                FROM Events e
                WHERE e.status IN ('published', 'upcoming', 'ongoing')
                AND e.end_date < GETDATE()
              ) AS CompletedEvents
            )
          `;
          await database.query(updateQuery);
          console.log(`‚úÖ Updated event status to 'completed'`);
        } catch (err) {
          console.error('‚ùå Failed to update event status:', err.message);
        }
        
        console.log(`‚úÖ Sent ${rows.length} completion notifications`);
      }
    } catch (err) {
      console.error('‚ùå Error in checkCompletedEvents:', err);
    }
  }

  /**
   * G·ª≠i th√¥ng b√°o khi s·ª± ki·ªán b·ªã h·ªßy
   */
  async notifyEventCancellation(eventId, reason = '') {
    try {
      console.log(`üì¢ Notifying users about event ${eventId} cancellation...`);
      
      // L·∫•y th√¥ng tin s·ª± ki·ªán v√† danh s√°ch users ƒë√£ ƒëƒÉng k√Ω
      const query = `
        SELECT 
          e.title,
          r.user_id
        FROM Events e
        INNER JOIN EventRegistrations r ON e.event_id = r.event_id
        WHERE e.event_id = @eventId AND r.status = 'registered'
      `;
      
      const result = await database.query(query, { eventId: parseInt(eventId) });
      const rows = result.recordset || result || [];
      
      const reasonText = reason ? ` L√Ω do: ${reason}` : '';
      
      for (const row of rows) {
        try {
          const title = `S·ª± ki·ªán b·ªã h·ªßy`;
          const message = `S·ª± ki·ªán "${row.title}" ƒë√£ b·ªã h·ªßy.${reasonText} Ch√∫ng t√¥i r·∫•t xin l·ªói v√¨ s·ª± b·∫•t ti·ªán n√†y.`;
          
          const insertQuery = `
            INSERT INTO Notifications (user_id, title, message, type, related_event_id, is_read, created_at)
            VALUES (@userId, @title, @message, 'event_cancelled', @eventId, 0, GETDATE())
          `;
          
          await database.query(insertQuery, {
            userId: row.user_id,
            title: title,
            message: message,
            eventId: parseInt(eventId)
          });
          
          console.log(`‚úÖ Sent cancellation notification to user ${row.user_id}`);
        } catch (err) {
          console.error(`‚ùå Failed to send cancellation notification to user ${row.user_id}:`, err.message);
        }
      }
      
      console.log(`‚úÖ Sent ${rows.length} cancellation notifications`);
    } catch (err) {
      console.error('‚ùå Error in notifyEventCancellation:', err);
    }
  }
}

// Export singleton instance
const scheduler = new NotificationScheduler();
module.exports = scheduler;
