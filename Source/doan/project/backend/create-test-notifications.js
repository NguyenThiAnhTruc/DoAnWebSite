const database = require('./config/database');

async function createTestNotifications() {
    try {
        await database.connect();
        console.log('‚úÖ Database connected successfully');
        
        // T√¨m user c√≥ ID
        const users = await database.query('SELECT TOP 3 user_id, email FROM Users WHERE status = \'active\'');
        console.log('üë• Found users:', users.recordset.length);
        
        if (users.recordset.length === 0) {
            console.log('‚ùå No users found');
            return;
        }
        
        const testUser = users.recordset[0];
        console.log('üß™ Creating notifications for user:', testUser.email);
        
        // T·∫°o 5 th√¥ng b√°o test
        const notifications = [
            {
                title: 'S·ª± ki·ªán m·ªõi ƒë∆∞·ª£c t·∫°o',
                message: 'H·ªôi th·∫£o "C√¥ng ngh·ªá th√¥ng tin 2024" ƒë√£ ƒë∆∞·ª£c t·∫°o. ƒêƒÉng k√Ω ngay!',
                type: 'event_created'
            },
            {
                title: 'ƒêƒÉng k√Ω th√†nh c√¥ng', 
                message: 'B·∫°n ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng s·ª± ki·ªán Workshop Thi·∫øt k·∫ø ƒë·ªì h·ªça',
                type: 'registration_confirmed'
            },
            {
                title: 'Nh·∫Øc nh·ªü s·ª± ki·ªán',
                message: 'Cu·ªôc thi L·∫≠p tr√¨nh Olympic s·∫Ω di·ªÖn ra v√†o ng√†y mai',
                type: 'event_reminder'
            },
            {
                title: 'S·ª± ki·ªán ƒë√£ ho√†n th√†nh',
                message: 'S·ª± ki·ªán "H·ªôi th·∫£o AI" ƒë√£ k·∫øt th√∫c. C·∫£m ∆°n b·∫°n ƒë√£ tham gia!',
                type: 'event_completed'
            },
            {
                title: 'Th√¥ng b√°o quan tr·ªçng',
                message: 'Vui l√≤ng c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n trong h·ªì s∆° c·ªßa b·∫°n',
                type: 'system_notification'
            }
        ];
        
        for (const notif of notifications) {
            await database.query(`
                INSERT INTO Notifications (user_id, title, message, type, created_at, is_read)
                VALUES (@userId, @title, @message, @type, GETDATE(), 0)
            `, {
                userId: testUser.user_id,
                title: notif.title,
                message: notif.message,
                type: notif.type
            });
        }
        
        console.log('‚úÖ Created 5 test notifications');
        
        // Ki·ªÉm tra notifications ƒë√£ t·∫°o
        const result = await database.query(`
            SELECT notification_id, title, message, type, is_read, created_at 
            FROM Notifications 
            WHERE user_id = @userId 
            ORDER BY created_at DESC
        `, { userId: testUser.user_id });
        
        console.log(`üìä Total notifications for user ${testUser.email}:`, result.recordset.length);
        result.recordset.forEach(n => {
            console.log(`  - ${n.title} (${n.type}) - Read: ${n.is_read}`);
        });
        
    } catch (error) {
        console.error('‚ùå Error:', error);
    } finally {
        process.exit(0);
    }
}

createTestNotifications();