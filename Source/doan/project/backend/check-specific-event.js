const db = require('./config/database');

async function checkSpecificEvent() {
    try {
        const eventTitle = 'eqweqweqweqweqwe';
        
        console.log(`üîç Ki·ªÉm tra s·ª± ki·ªán: ${eventTitle}\n`);
        
        // L·∫•y th√¥ng tin chi ti·∫øt
        const result = await db.query(`
            SELECT 
                e.event_id,
                e.title,
                e.current_participants,
                e.max_participants,
                e.status,
                COUNT(DISTINCT er.registration_id) as actual_registrations,
                COUNT(DISTINCT CASE WHEN er.status = 'registered' THEN er.registration_id END) as registered_count
            FROM Events e
            LEFT JOIN EventRegistrations er ON e.event_id = er.event_id
            WHERE e.title LIKE @title
            GROUP BY e.event_id, e.title, e.current_participants, e.max_participants, e.status
        `, { title: `%${eventTitle}%` });
        
        const events = result.recordset || result;
        
        if (events.length === 0) {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán!');
            await db.close();
            return;
        }
        
        const event = events[0];
        
        console.log('üìä Th√¥ng tin s·ª± ki·ªán:');
        console.log(`   Event ID: ${event.event_id}`);
        console.log(`   Title: ${event.title}`);
        console.log(`   Status: ${event.status}`);
        console.log(`   Current Participants: ${event.current_participants}`);
        console.log(`   Max Participants: ${event.max_participants}`);
        console.log(`   Actual Registrations: ${event.actual_registrations}`);
        console.log(`   Available Slots: ${event.max_participants - event.current_participants}`);
        
        console.log('\nüîç Ph√¢n t√≠ch:');
        
        const isFull = event.current_participants >= event.max_participants;
        const hasSlots = event.current_participants < event.max_participants;
        
        if (isFull && event.actual_registrations === 0) {
            console.log('   ‚ùå BUG NGHI√äM TR·ªåNG: S·ª± ki·ªán hi·ªÉn th·ªã ƒë·∫ßy nh∆∞ng kh√¥ng c√≥ ƒëƒÉng k√Ω!');
            console.log(`   ‚ùå current_participants (${event.current_participants}) >= max_participants (${event.max_participants})`);
            console.log(`   ‚ùå Nh∆∞ng actual_registrations = ${event.actual_registrations}`);
            console.log('\nüîß C·∫ßn ch·∫°y: UPDATE Events SET current_participants = 0 WHERE event_id = ' + event.event_id);
        } else if (event.current_participants !== event.actual_registrations) {
            console.log('   ‚ö†Ô∏è  Kh√¥ng ƒë·ªìng b·ªô:');
            console.log(`   ‚ö†Ô∏è  current_participants (${event.current_participants}) ‚â† actual_registrations (${event.actual_registrations})`);
            console.log('\nüîß C·∫ßn ch·∫°y fix script ƒë·ªÉ ƒë·ªìng b·ªô');
        } else if (hasSlots) {
            console.log(`   ‚úÖ S·ª± ki·ªán c√≤n ${event.max_participants - event.current_participants} ch·ªó tr·ªëng`);
            console.log('   ‚úÖ Sinh vi√™n c√≥ th·ªÉ ƒëƒÉng k√Ω');
        } else {
            console.log('   ‚ö†Ô∏è  S·ª± ki·ªán th·ª±c s·ª± ƒë√£ ƒë·∫ßy');
        }
        
        // Ki·ªÉm tra danh s√°ch ƒëƒÉng k√Ω
        console.log('\nüìã Danh s√°ch ƒëƒÉng k√Ω:');
        const registrations = await db.query(`
            SELECT 
                er.registration_id,
                er.user_id,
                u.username,
                er.status,
                er.registered_at
            FROM EventRegistrations er
            LEFT JOIN Users u ON er.user_id = u.user_id
            WHERE er.event_id = @eventId
            ORDER BY er.registered_at DESC
        `, { eventId: event.event_id });
        
        const regs = registrations.recordset || registrations;
        
        if (regs.length === 0) {
            console.log('   üì≠ Ch∆∞a c√≥ ai ƒëƒÉng k√Ω');
        } else {
            regs.forEach((r, idx) => {
                console.log(`   ${idx + 1}. User ${r.user_id} (${r.username}) - Status: ${r.status} - Registered: ${r.registered_at}`);
            });
        }
        
        await db.close();
    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
        process.exit(1);
    }
}

checkSpecificEvent();
